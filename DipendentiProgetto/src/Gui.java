
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Ricca
 */
public class Gui extends javax.swing.JFrame {

    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        listaDip.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        // aggiungere carica
        aggiornaTabellaDipendenti(storico.getDipendenti());
        aggiornaTabellaProgetti(storico.getProgetti());
        aggiornaTabellaStorico(storico.getEventi());
        aggiornaLista();

        panStorico.setVisible(true);
        panStorico.setEnabled(true);
        panDipendenti.setVisible(false);
        panDipendenti.setEnabled(false);
        panProgetti.setVisible(false);
        panProgetti.setEnabled(false);

        panelProgrammatore.setVisible(false);
        panelTeamManager.setVisible(true);
        panelGarante.setVisible(false);
        panelProgrammatore.setEnabled(false);
        panelTeamManager.setEnabled(true);
        panelGarante.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panStorico = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabStorico = new javax.swing.JTable();
        titoloStorico = new javax.swing.JLabel();
        cercaStorico = new javax.swing.JTextField();
        visitaDipendenti = new javax.swing.JButton();
        visitaProgetti = new javax.swing.JButton();
        filtroStorico = new javax.swing.JComboBox<>();
        panDipendenti = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabDipendenti = new javax.swing.JTable();
        titoloDipendenti = new javax.swing.JLabel();
        cercaDipendenti = new javax.swing.JTextField();
        aggiungiDipendente = new javax.swing.JButton();
        eliminaDipendente = new javax.swing.JButton();
        modificaDipendente = new javax.swing.JButton();
        indietroDipendente = new javax.swing.JButton();
        filtroDipendente = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        idDipendente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nomeDipendente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ruoloDipendente = new javax.swing.JComboBox<>();
        panelProgrammatore = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        linguaggioDip = new javax.swing.JTextField();
        panelGarante = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        certificazioneDip = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        anniDip = new javax.swing.JSpinner();
        panelTeamManager = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        nomeTeamDip = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        progettoDip = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaDip = new javax.swing.JList<>();
        panProgetti = new javax.swing.JPanel();
        titoloProgetti = new javax.swing.JLabel();
        cercaProgetti = new javax.swing.JTextField();
        eliminaProgetti = new javax.swing.JButton();
        aggiungiProgetti = new javax.swing.JButton();
        modificaProgetti = new javax.swing.JButton();
        indietroProgetti = new javax.swing.JButton();
        filtroProgetto = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabProgetti = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        budgetProgetto = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        idProgetto = new javax.swing.JTextField();
        dataInizioProgetto = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        dataFineProgetto = new javax.swing.JSpinner();
        nomeProgetto = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        statoProgetto = new javax.swing.JComboBox<>();
        fileProgetto = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        descrizioneProgetto = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabStorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Modifiche", "Dettagli"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabStorico);

        titoloStorico.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        titoloStorico.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titoloStorico.setText("Storico");

        cercaStorico.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                cercaStoricoCaretUpdate(evt);
            }
        });

        visitaDipendenti.setText("Dipendenti");
        visitaDipendenti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitaDipendentiActionPerformed(evt);
            }
        });

        visitaProgetti.setText("Progetti");
        visitaProgetti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitaProgettiActionPerformed(evt);
            }
        });

        filtroStorico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nessuno", "Alfabetico", "Data", "Operazione", "Oggetto" }));
        filtroStorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroStoricoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panStoricoLayout = new javax.swing.GroupLayout(panStorico);
        panStorico.setLayout(panStoricoLayout);
        panStoricoLayout.setHorizontalGroup(
            panStoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panStoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panStoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titoloStorico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cercaStorico)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panStoricoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filtroStorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(visitaProgetti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(visitaDipendenti))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
                .addContainerGap())
        );
        panStoricoLayout.setVerticalGroup(
            panStoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panStoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titoloStorico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cercaStorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addGroup(panStoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(visitaDipendenti)
                    .addComponent(visitaProgetti)
                    .addComponent(filtroStorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabDipendenti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Ruolo", "Progetti Attivi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabDipendenti);

        titoloDipendenti.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        titoloDipendenti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titoloDipendenti.setText("Dipendenti");

        cercaDipendenti.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                cercaDipendentiCaretUpdate(evt);
            }
        });

        aggiungiDipendente.setText("Aggiungi");
        aggiungiDipendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungiDipendenteActionPerformed(evt);
            }
        });

        eliminaDipendente.setText("Elimina");
        eliminaDipendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaDipendenteActionPerformed(evt);
            }
        });

        modificaDipendente.setText("Modifica");
        modificaDipendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaDipendenteActionPerformed(evt);
            }
        });

        indietroDipendente.setText("Indietro");
        indietroDipendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indietroDipendenteActionPerformed(evt);
            }
        });

        filtroDipendente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nessuno", "Alfabetico", "Ruolo" }));
        filtroDipendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroDipendenteActionPerformed(evt);
            }
        });

        jLabel10.setText("ID");

        jLabel1.setText("Nome");

        jLabel2.setText("Ruolo");

        ruoloDipendente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Team Manager", "Analista", "Progettista", "Programmatore", "Tester", "Garante della qualità" }));
        ruoloDipendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ruoloDipendenteActionPerformed(evt);
            }
        });

        jLabel3.setText("Linguaggio di programmazione");

        javax.swing.GroupLayout panelProgrammatoreLayout = new javax.swing.GroupLayout(panelProgrammatore);
        panelProgrammatore.setLayout(panelProgrammatoreLayout);
        panelProgrammatoreLayout.setHorizontalGroup(
            panelProgrammatoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProgrammatoreLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProgrammatoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(linguaggioDip))
                .addContainerGap())
        );
        panelProgrammatoreLayout.setVerticalGroup(
            panelProgrammatoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProgrammatoreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linguaggioDip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("Certificazione");

        jLabel5.setText("Anni di esperienza");

        anniDip.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout panelGaranteLayout = new javax.swing.GroupLayout(panelGarante);
        panelGarante.setLayout(panelGaranteLayout);
        panelGaranteLayout.setHorizontalGroup(
            panelGaranteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGaranteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGaranteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(certificazioneDip)
                    .addGroup(panelGaranteLayout.createSequentialGroup()
                        .addGroup(panelGaranteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(anniDip))
                .addContainerGap())
        );
        panelGaranteLayout.setVerticalGroup(
            panelGaranteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGaranteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(certificazioneDip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(anniDip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel6.setText("Nome team");

        jLabel7.setText("Seleziona progetto");

        progettoDip.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "vuoto" }));

        jLabel8.setText("Seleziona dipendetni");

        jScrollPane4.setViewportView(listaDip);

        javax.swing.GroupLayout panelTeamManagerLayout = new javax.swing.GroupLayout(panelTeamManager);
        panelTeamManager.setLayout(panelTeamManagerLayout);
        panelTeamManagerLayout.setHorizontalGroup(
            panelTeamManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTeamManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTeamManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(progettoDip, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nomeTeamDip, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTeamManagerLayout.createSequentialGroup()
                        .addGroup(panelTeamManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTeamManagerLayout.setVerticalGroup(
            panelTeamManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeamManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nomeTeamDip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progettoDip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panDipendentiLayout = new javax.swing.GroupLayout(panDipendenti);
        panDipendenti.setLayout(panDipendentiLayout);
        panDipendentiLayout.setHorizontalGroup(
            panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDipendentiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panDipendentiLayout.createSequentialGroup()
                        .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titoloDipendenti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panDipendentiLayout.createSequentialGroup()
                                .addComponent(indietroDipendente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(filtroDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modificaDipendente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eliminaDipendente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aggiungiDipendente)))
                        .addContainerGap())
                    .addGroup(panDipendentiLayout.createSequentialGroup()
                        .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                            .addComponent(cercaDipendenti))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelProgrammatore, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelGarante, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelTeamManager, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panDipendentiLayout.createSequentialGroup()
                                .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panDipendentiLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(idDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nomeDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panDipendentiLayout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ruoloDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())))))
        );
        panDipendentiLayout.setVerticalGroup(
            panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDipendentiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titoloDipendenti)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panDipendentiLayout.createSequentialGroup()
                        .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cercaDipendenti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(idDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(panDipendentiLayout.createSequentialGroup()
                        .addComponent(nomeDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(ruoloDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelProgrammatore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelGarante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelTeamManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panDipendentiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aggiungiDipendente)
                    .addComponent(eliminaDipendente)
                    .addComponent(modificaDipendente)
                    .addComponent(filtroDipendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indietroDipendente))
                .addContainerGap())
        );

        titoloProgetti.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        titoloProgetti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titoloProgetti.setText("Progetti");

        cercaProgetti.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                cercaProgettiCaretUpdate(evt);
            }
        });

        eliminaProgetti.setText("Elimina");
        eliminaProgetti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaProgettiActionPerformed(evt);
            }
        });

        aggiungiProgetti.setText("Aggiungi");
        aggiungiProgetti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungiProgettiActionPerformed(evt);
            }
        });

        modificaProgetti.setText("Modifica");
        modificaProgetti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaProgettiActionPerformed(evt);
            }
        });

        indietroProgetti.setText("Indietro");
        indietroProgetti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indietroProgettiActionPerformed(evt);
            }
        });

        filtroProgetto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nessuno", "Alfabetico", "Stato", "Data inizio", "Data fine" }));
        filtroProgetto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroProgettoActionPerformed(evt);
            }
        });

        tabProgetti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Stato", "Budget", "Data fine"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabProgetti);

        jLabel9.setText("ID");

        jLabel15.setText("Data Inizio");

        dataInizioProgetto.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), null, java.util.Calendar.DAY_OF_MONTH));

        jLabel11.setText("Nome");

        dataFineProgetto.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), null, java.util.Calendar.DAY_OF_MONTH));

        jLabel16.setText("Data fine");

        jLabel12.setText("Stato");

        jLabel17.setText("File collegati (scrivere i percorsi separati da una virgola)");

        statoProgetto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "In corso", "Completato", "Annullato", "Scaduto" }));

        jLabel13.setText("Descrizione");

        jLabel14.setText("Budget");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeProgetto))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statoProgetto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(descrizioneProgetto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(budgetProgetto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataInizioProgetto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataFineProgetto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(fileProgetto, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(idProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statoProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descrizioneProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(budgetProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataInizioProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataFineProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panProgettiLayout = new javax.swing.GroupLayout(panProgetti);
        panProgetti.setLayout(panProgettiLayout);
        panProgettiLayout.setHorizontalGroup(
            panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panProgettiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titoloProgetti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panProgettiLayout.createSequentialGroup()
                        .addGroup(panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cercaProgetti, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                            .addGroup(panProgettiLayout.createSequentialGroup()
                                .addComponent(indietroProgetti)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panProgettiLayout.createSequentialGroup()
                                .addComponent(filtroProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modificaProgetti)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eliminaProgetti)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aggiungiProgetti))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        panProgettiLayout.setVerticalGroup(
            panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panProgettiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titoloProgetti)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panProgettiLayout.createSequentialGroup()
                        .addComponent(cercaProgetti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(panProgettiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aggiungiProgetti)
                    .addComponent(eliminaProgetti)
                    .addComponent(modificaProgetti)
                    .addComponent(indietroProgetti)
                    .addComponent(filtroProgetto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panStorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panDipendenti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panProgetti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panDipendenti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panStorico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panProgetti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Storico storico = new Storico("storico.csv");
    private DefaultListModel<String> listaDipModel = new DefaultListModel<>(); // Serve a gestire la lista di dipendenti
    int pos;
    private Dipendente modificandoD = null;
    private Progetto modificandoP = null;

    private void visitaProgettiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitaProgettiActionPerformed
        panStorico.setVisible(false);
        panStorico.setEnabled(false);
        panDipendenti.setVisible(false);
        panDipendenti.setEnabled(false);
        panProgetti.setVisible(true);
        panProgetti.setEnabled(true);
    }//GEN-LAST:event_visitaProgettiActionPerformed

    private void visitaDipendentiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitaDipendentiActionPerformed
        panStorico.setVisible(false);
        panStorico.setEnabled(false);
        panDipendenti.setVisible(true);
        panDipendenti.setEnabled(true);
        panProgetti.setVisible(false);
        panProgetti.setEnabled(false);
    }//GEN-LAST:event_visitaDipendentiActionPerformed

    private void indietroDipendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indietroDipendenteActionPerformed
        panStorico.setVisible(true);
        panStorico.setEnabled(true);
        panDipendenti.setVisible(false);
        panDipendenti.setEnabled(false);
        panProgetti.setVisible(false);
        panProgetti.setEnabled(false);
    }//GEN-LAST:event_indietroDipendenteActionPerformed

    private void indietroProgettiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indietroProgettiActionPerformed
        panStorico.setVisible(true);
        panStorico.setEnabled(true);
        panDipendenti.setVisible(false);
        panDipendenti.setEnabled(false);
        panProgetti.setVisible(false);
        panProgetti.setEnabled(false);
    }//GEN-LAST:event_indietroProgettiActionPerformed

    // DIPENDENTE
    private void aggiungiDipendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiDipendenteActionPerformed
        if (modificandoD != null) {
            if (modificandoD instanceof TeamManager) {
                ((TeamManager) modificandoD).setNome(nomeDipendente.getText().trim());
                ((TeamManager) modificandoD).setNomeTeam(nomeTeamDip.getText().trim());
                ((TeamManager) modificandoD).setProgetto((String) progettoDip.getSelectedItem());
                aggiungiAlTeam();
            } else if (modificandoD instanceof Analista) {
                ((Analista) modificandoD).setNome(nomeDipendente.getText().trim());
            } else if (modificandoD instanceof Progettista) {
                ((Progettista) modificandoD).setNome(nomeDipendente.getText().trim());
            } else if (modificandoD instanceof Programmatore) {
                ((Programmatore) modificandoD).setNome(nomeDipendente.getText().trim());
                ((Programmatore) modificandoD).setLinguaggio(linguaggioDip.getText().trim());
                linguaggioDip.setText(((Programmatore) modificandoD).getLinguaggio());
            } else if (modificandoD instanceof Tester) {
                ((Tester) modificandoD).setNome(nomeDipendente.getText().trim());
            } else if (modificandoD instanceof GaranteDellaQualita) {
                ((GaranteDellaQualita) modificandoD).setNome(nomeDipendente.getText().trim());
                ((GaranteDellaQualita) modificandoD).setCertificazione(certificazioneDip.getText().trim());
                ((GaranteDellaQualita) modificandoD).setAnniDiEsperienza((int) anniDip.getValue());
            }

            idDipendente.setEnabled(true);
            ruoloDipendente.setEnabled(true);

            JOptionPane.showMessageDialog(this, "Dipendente aggiunto con successo!");
        } else {
            for (Dipendente d : storico.getDipendenti()) {
                if (d.getId().equals(idDipendente.getText().trim())) {
                    JOptionPane.showMessageDialog(this, "ID già esistente per un altro dipendente!", "Errore", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (ruoloDipendente.getSelectedIndex() == 0) {
                if (idDipendente.getText().isBlank() || nomeDipendente.getText().isBlank() || nomeTeamDip.getText().isBlank()) {
                    JOptionPane.showMessageDialog(rootPane, "Completa tutti i campi", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                TeamManager o = new TeamManager(idDipendente.getText(), nomeDipendente.getText(), 0, nomeTeamDip.getText(), (String) progettoDip.getSelectedItem());
                // sistemare progetti e dipendenti
                storico.aggiungiDipendente(o);
            }

            if (ruoloDipendente.getSelectedIndex() == 1) {
                if (idDipendente.getText().isBlank() || nomeDipendente.getText().isBlank()) {
                    JOptionPane.showMessageDialog(rootPane, "Completa tutti i campi", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Analista o = new Analista(idDipendente.getText(), nomeDipendente.getText(), 0);
                storico.aggiungiDipendente(o);
            }

            if (ruoloDipendente.getSelectedIndex() == 2) {
                if (idDipendente.getText().isBlank() || nomeDipendente.getText().isBlank()) {
                    JOptionPane.showMessageDialog(rootPane, "Completa tutti i campi", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Progettista o = new Progettista(idDipendente.getText(), nomeDipendente.getText(), 0);
                storico.aggiungiDipendente(o);
            }

            if (ruoloDipendente.getSelectedIndex() == 3) {
                if (idDipendente.getText().isBlank() || nomeDipendente.getText().isBlank() || linguaggioDip.getText().isBlank()) {
                    JOptionPane.showMessageDialog(rootPane, "Completa tutti i campi", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Programmatore o = new Programmatore(idDipendente.getText(), nomeDipendente.getText(), 0, linguaggioDip.getText());
                storico.aggiungiDipendente(o);
            }

            if (ruoloDipendente.getSelectedIndex() == 4) {
                if (idDipendente.getText().isBlank() || nomeDipendente.getText().isBlank()) {
                    JOptionPane.showMessageDialog(rootPane, "Completa tutti i campi", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Tester o = new Tester(idDipendente.getText(), nomeDipendente.getText(), 0);
                storico.aggiungiDipendente(o);
            }

            if (ruoloDipendente.getSelectedIndex() == 5) {
                if (idDipendente.getText().isBlank() || nomeDipendente.getText().isBlank() || certificazioneDip.getText().isBlank()) {
                    JOptionPane.showMessageDialog(rootPane, "Completa tutti i campi", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                GaranteDellaQualita o = new GaranteDellaQualita(idDipendente.getText(), nomeDipendente.getText(), 0, certificazioneDip.getText(), (int) anniDip.getValue());
                storico.aggiungiDipendente(o);
            }

            JOptionPane.showMessageDialog(this, "Dipendente aggiunto con successo!");
        }

        aggiornaTabellaDipendenti(storico.getDipendenti());
        aggiornaTabellaStorico(storico.getEventi());
        // da sistemare
        aggiornaLista();
        // aggiungere salva

        idDipendente.setText("");
        nomeDipendente.setText("");
        nomeTeamDip.setText("");
        certificazioneDip.setText("");
        linguaggioDip.setText("");
        anniDip.setValue(0);
        progettoDip.setSelectedIndex(0);

    }//GEN-LAST:event_aggiungiDipendenteActionPerformed

    private void ruoloDipendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ruoloDipendenteActionPerformed
        if (ruoloDipendente.getSelectedIndex() == 0) {
            panelProgrammatore.setVisible(false);
            panelTeamManager.setVisible(true);
            panelGarante.setVisible(false);
            panelProgrammatore.setEnabled(false);
            panelTeamManager.setEnabled(true);
            panelGarante.setEnabled(false);
        }

        if (ruoloDipendente.getSelectedIndex() == 1 || ruoloDipendente.getSelectedIndex() == 2 || ruoloDipendente.getSelectedIndex() == 4) {
            panelProgrammatore.setVisible(false);
            panelTeamManager.setVisible(false);
            panelGarante.setVisible(false);
            panelProgrammatore.setEnabled(false);
            panelTeamManager.setEnabled(false);
            panelGarante.setEnabled(false);
        }

        if (ruoloDipendente.getSelectedIndex() == 5) {
            panelProgrammatore.setVisible(false);
            panelTeamManager.setVisible(false);
            panelGarante.setVisible(true);
            panelProgrammatore.setEnabled(false);
            panelTeamManager.setEnabled(false);
            panelGarante.setEnabled(true);
        }

        if (ruoloDipendente.getSelectedIndex() == 3) {
            panelProgrammatore.setVisible(true);
            panelTeamManager.setVisible(false);
            panelGarante.setVisible(false);
            panelProgrammatore.setEnabled(true);
            panelTeamManager.setEnabled(false);
            panelGarante.setEnabled(false);
        }

    }//GEN-LAST:event_ruoloDipendenteActionPerformed

    private void eliminaDipendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaDipendenteActionPerformed
        int selectedRow = tabDipendenti.getSelectedRow();
        if (selectedRow >= 0) {
            String id = (String) tabDipendenti.getValueAt(selectedRow, 0);
            Dipendente dipendente = null;
            for (Dipendente d : storico.getDipendenti()) {
                if (d.getId().equals(id)) {
                    dipendente = d;
                    break;
                }
            }
            if (dipendente != null) {
                int conferma = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler eliminare il dipendente " + dipendente.getNome() + "?", "Conferma eliminazione", JOptionPane.YES_NO_OPTION);
                if (conferma == JOptionPane.YES_OPTION) {
                    storico.rimuoviDipendente(dipendente);
                    aggiornaTabellaDipendenti(storico.getDipendenti());
                    aggiornaTabellaStorico(storico.getEventi());
                    aggiornaLista();
                    JOptionPane.showMessageDialog(this, "Dipendente eliminato con successo!");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleziona un dipendente da eliminare", "Errore", JOptionPane.WARNING_MESSAGE);
        }
        // aggiungere salva
    }//GEN-LAST:event_eliminaDipendenteActionPerformed

    private void modificaDipendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaDipendenteActionPerformed
        int selectedRow = tabDipendenti.getSelectedRow();
        if (selectedRow >= 0) {
            String id = (String) tabDipendenti.getValueAt(selectedRow, 0);

            // Cerca il dipendente in base agli ID
            for (Dipendente d : storico.getDipendenti()) {
                if (d.getId().equals(id)) {
                    modificandoD = d;

                    break;
                }
            }
            if (modificandoD != null) {
                idDipendente.setText(modificandoD.getId());
                nomeDipendente.setText(modificandoD.getNome());
                idDipendente.setEnabled(false);
                ruoloDipendente.setEnabled(false);

                if (modificandoD instanceof Programmatore) {
                    ruoloDipendente.setSelectedIndex(3);
                    linguaggioDip.setText(((Programmatore) modificandoD).getLinguaggio());
                } else if (modificandoD instanceof GaranteDellaQualita) {
                    ruoloDipendente.setSelectedIndex(5);
                    certificazioneDip.setText(((GaranteDellaQualita) modificandoD).getCertificazione());
                    anniDip.setValue(((GaranteDellaQualita) modificandoD).getAnniDiEsperienza());
                } else if (modificandoD instanceof TeamManager) {
                    ruoloDipendente.setSelectedIndex(0);
                    nomeTeamDip.setText(((TeamManager) modificandoD).getNomeTeam());
                } else if (modificandoD instanceof Analista) {
                    ruoloDipendente.setSelectedIndex(1);
                } else if (modificandoD instanceof Progettista) {
                    ruoloDipendente.setSelectedIndex(2);
                } else if (modificandoD instanceof Tester) {
                    ruoloDipendente.setSelectedIndex(4);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleziona un dipendente da modificare", "Errore", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_modificaDipendenteActionPerformed

    private void filtroDipendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroDipendenteActionPerformed
        if (filtroDipendente.getSelectedIndex() == 0) {
            aggiornaTabellaDipendenti(storico.getDipendenti());
        }
        if (filtroDipendente.getSelectedIndex() == 1) {
            aggiornaTabellaDipendenti(storico.ordinaDipendentiAlfabetico());
        }
        if (filtroDipendente.getSelectedIndex() == 2) {
            aggiornaTabellaDipendenti(storico.ordinaDipendentiPerClasse());
        }
    }//GEN-LAST:event_filtroDipendenteActionPerformed

    private void cercaDipendentiCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_cercaDipendentiCaretUpdate
        aggiornaTabellaDipendenti(storico.getDipendenti());
    }//GEN-LAST:event_cercaDipendentiCaretUpdate

    // PROGETTO
    private void aggiungiProgettiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiProgettiActionPerformed
        String id = idProgetto.getText().trim();
        String nome = nomeProgetto.getText().trim();
        String descrizione = descrizioneProgetto.getText().trim();
        double budget = Double.parseDouble(budgetProgetto.getText().trim());
        String file = fileProgetto.getText().trim();
        int stato = statoProgetto.getSelectedIndex();

        Date dataI = (Date) dataInizioProgetto.getValue();
        LocalDate dataInizio = dataI.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        Date dataF = (Date) dataFineProgetto.getValue();
        LocalDate dataFine = dataF.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // Controlli
        for (Progetto p : storico.getProgetti()) {
            if (p.getId().equals(id)) {
                JOptionPane.showMessageDialog(this, "ID già esistente per un altro progetto!", "Errore", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (id.isEmpty() || nome.isEmpty() || descrizione.isEmpty() || budgetProgetto.getText().isEmpty() || file.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tutti i campi devono essere compilati!", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (budget <= 0) {
            JOptionPane.showMessageDialog(this, "Il budget deve essere un valore positivo!", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (dataFine.isBefore(dataInizio)) {
            JOptionPane.showMessageDialog(this, "La data di fine non può essere precedente alla data di inizio!", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Progetto p = new Progetto(id, nome, stato, descrizione, budget, dataInizio, dataFine, file);
        storico.aggiungiProgetto(p);

        JOptionPane.showMessageDialog(this, "Progetto aggiunto con successo!");
        aggiornaTabellaProgetti(storico.getProgetti());
        aggiornaTabellaStorico(storico.getEventi());
        aggiornaProgettoDipendente();
        // aggiungere salva

        idProgetto.setText("");
        nomeProgetto.setText("");
        descrizioneProgetto.setText("");
        budgetProgetto.setText("");
        fileProgetto.setText("");
        statoProgetto.setSelectedIndex(0);
    }//GEN-LAST:event_aggiungiProgettiActionPerformed

    // da sistemare
    private void eliminaProgettiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaProgettiActionPerformed
        int selectedRow = tabProgetti.getSelectedRow();
        if (selectedRow >= 0) {
            String id = (String) tabProgetti.getValueAt(selectedRow, 0);
            Progetto progettoDaRimuovere = null;

            for (Progetto p : storico.getProgetti()) {
                if (p.getId().equals(id)) {
                    progettoDaRimuovere = p;
                    break;
                }
            }

            if (progettoDaRimuovere != null) {
                int conferma = JOptionPane.showConfirmDialog(this,
                        "Sei sicuro di voler eliminare il progetto " + progettoDaRimuovere.getNome() + "?",
                        "Conferma eliminazione",
                        JOptionPane.YES_NO_OPTION);

                if (conferma == JOptionPane.YES_OPTION) {
                    storico.rimuoviProgetto(progettoDaRimuovere);
                    JOptionPane.showMessageDialog(this, "Progetto eliminato con successo!");
                    aggiornaTabellaProgetti(storico.getProgetti());
                    aggiornaTabellaStorico(storico.getEventi());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleziona un progetto da eliminare!", "Errore", JOptionPane.WARNING_MESSAGE);
        }
        // aggiungere salva
    }//GEN-LAST:event_eliminaProgettiActionPerformed

    // da sistemare
    private void modificaProgettiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaProgettiActionPerformed
        int selectedRow = tabProgetti.getSelectedRow();
        if (selectedRow >= 0) {
            String id = (String) tabProgetti.getValueAt(selectedRow, 0);
            Progetto progettoDaModificare = null;

            for (Progetto p : storico.getProgetti()) {
                if (p.getId().equals(id)) {
                    progettoDaModificare = p;
                    break;
                }
            }

            if (progettoDaModificare != null) {
                try {
                    String nuovoNome = nomeProgetto.getText().trim();
                    int nuovoStato = statoProgetto.getSelectedIndex();
                    String nuovaDescrizione = descrizioneProgetto.getText().trim();
                    double nuovoBudget = Double.parseDouble(budgetProgetto.getText().trim());
                    LocalDate nuovaDataInizio = (LocalDate) dataInizioProgetto.getValue();
                    LocalDate nuovaDataFine = (LocalDate) dataFineProgetto.getValue();
                    String nuovoFile = fileProgetto.getText().trim();

                    if (nuovoNome.isEmpty() || nuovaDescrizione.isEmpty() || nuovoFile.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Tutti i campi devono essere compilati!", "Errore", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    progettoDaModificare.setNome(nuovoNome);
                    progettoDaModificare.setStato(nuovoStato);
                    progettoDaModificare.setDescrizione(nuovaDescrizione);
                    progettoDaModificare.setBudget(nuovoBudget);
                    progettoDaModificare.setDataFine(nuovaDataFine);
                    progettoDaModificare.setFile(nuovoFile);

                    JOptionPane.showMessageDialog(this, "Progetto modificato con successo!");
                    aggiornaTabellaProgetti(storico.getProgetti());
                    aggiornaTabellaStorico(storico.getEventi());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Inserisci un valore numerico valido per il budget!", "Errore", JOptionPane.WARNING_MESSAGE);
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Errore", JOptionPane.WARNING_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleziona un progetto da modificare!", "Errore", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_modificaProgettiActionPerformed

    private void filtroProgettoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroProgettoActionPerformed
        if (filtroProgetto.getSelectedIndex() == 0) {
            aggiornaTabellaDipendenti(storico.getDipendenti());
        }
        if (filtroProgetto.getSelectedIndex() == 1) {
            aggiornaTabellaProgetti(storico.ordinaProgettiAlfabetico());
        }
        if (filtroProgetto.getSelectedIndex() == 2) {
            aggiornaTabellaProgetti(storico.ordinaProgettiPerStato());
        }
        if (filtroProgetto.getSelectedIndex() == 3) {
            aggiornaTabellaProgetti(storico.ordinaProgettiPerDataInizio());
        }
        if (filtroProgetto.getSelectedIndex() == 4) {
            aggiornaTabellaProgetti(storico.ordinaProgettiPerDataFine());
        }
    }//GEN-LAST:event_filtroProgettoActionPerformed

    private void cercaProgettiCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_cercaProgettiCaretUpdate
        aggiornaTabellaProgetti(storico.getProgetti());
    }//GEN-LAST:event_cercaProgettiCaretUpdate

    private void cercaStoricoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_cercaStoricoCaretUpdate
        aggiornaTabellaStorico(storico.getEventi());
    }//GEN-LAST:event_cercaStoricoCaretUpdate

    private void filtroStoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroStoricoActionPerformed
        if (filtroStorico.getSelectedIndex() == 0) {
            aggiornaTabellaStorico(storico.getEventi());
        }
        if (filtroStorico.getSelectedIndex() == 1) {
            aggiornaTabellaStorico(storico.ordinaEventiAlfabetico());
        }
        if (filtroStorico.getSelectedIndex() == 2) {
            aggiornaTabellaStorico(storico.ordinaEventiPerData());
        }
        if (filtroStorico.getSelectedIndex() == 3) {
            aggiornaTabellaStorico(storico.ordinaEventiPerTipoOperazione());
        }
        if (filtroStorico.getSelectedIndex() == 4) {
            aggiornaTabellaStorico(storico.ordinaEventiPerOggettoCoinvolto());
        }
    }//GEN-LAST:event_filtroStoricoActionPerformed

    private void aggiornaTabellaDipendenti(Dipendente[] dipendenti) {
        DefaultTableModel m = (DefaultTableModel) tabDipendenti.getModel();
        while (m.getRowCount() > 0) {
            m.removeRow(0);
        }
        if (!cercaDipendenti.getText().isBlank()) {
            dipendenti = storico.cercaDipendente(cercaDipendenti.getText());
        }
        for (Dipendente d : dipendenti) {
            m.addRow(new Object[]{d.getId(), d.getNome(), d.getClasse(), d.getProgettiAttivi()});
        }
    }

    private void aggiornaTabellaProgetti(Progetto[] progetti) {
        DefaultTableModel m = (DefaultTableModel) tabProgetti.getModel();
        while (m.getRowCount() > 0) {
            m.removeRow(0);
        }
        if (!cercaProgetti.getText().isBlank()) {
            progetti = storico.cercaProgetto(cercaProgetti.getText());
        }
        for (Progetto p : progetti) {
            String stato = null;
            if (p.getStato() == 0) {
                stato = "In Corso";
            }
            if (p.getStato() == 1) {
                stato = "Completato";
            }
            if (p.getStato() == 2) {
                stato = "Annullato";
            }
            if (p.getStato() == 3) {
                stato = "Scaduto";
            }

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            String dataFineStringa = p.getDataFine().format(formatter);
            m.addRow(new Object[]{p.getId(), p.getNome(), stato, p.getBudget(), dataFineStringa});
        }
    }

    private void aggiornaTabellaStorico(EventoStorico[] eventi) {
        DefaultTableModel m = (DefaultTableModel) tabStorico.getModel();
        while (m.getRowCount() > 0) {
            m.removeRow(0);
        }

        if (!cercaStorico.getText().isBlank()) {
            eventi = storico.cercaEventoStorico(cercaStorico.getText());
        }

        for (EventoStorico evento : eventi) {
            m.addRow(new Object[]{evento.getTimestamp().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")), evento.getTipoOperazione(), evento.getOggettoCoinvolto(), evento.getDescrizione()});
        }
    }

    private void aggiornaProgettoDipendente() {
        progettoDip.removeAllItems();
        progettoDip.addItem("vuoto");
        for (Progetto p : storico.getProgetti()) {
            progettoDip.addItem(p.getId() + "-" + p.getNome());
        }
    }

    // da rivedere
    private void aggiornaLista() {
        listaDipModel.clear();
        Dipendente[] dipendenti = storico.getDipendenti();
        for (Dipendente d : dipendenti) {
            if (!(d instanceof TeamManager)) {
                listaDipModel.addElement(d.getId() + " - " + d.getNome());
            }
        }
        listaDip.setModel(listaDipModel);
    }

    private void aggiungiAlTeam() {
        int[] selectedIndices = listaDip.getSelectedIndices();
        if (selectedIndices.length == 0) {
            JOptionPane.showMessageDialog(this, "Seleziona almeno un dipendente dalla lista", "Errore", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String idTeamManager = idDipendente.getText();
        if (idTeamManager.isBlank()) {
            JOptionPane.showMessageDialog(this, "Seleziona un Team Manager valido", "Errore", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Dipendente teamManager = null;
        for (Dipendente d : storico.getDipendenti()) {
            if (d.getId().equals(idTeamManager) && d instanceof TeamManager) {
                teamManager = d;
                break;
            }
        }

        if (teamManager == null) {
            JOptionPane.showMessageDialog(this, "Il dipendente selezionato non è un Team Manager", "Errore", JOptionPane.WARNING_MESSAGE);
            return;
        }

        TeamManager tm = (TeamManager) teamManager;
        for (int index : selectedIndices) {
            String selectedValue = listaDipModel.get(index);
            String selectedId = selectedValue.split(" - ")[0];
            Dipendente dipendente = null;
            for (Dipendente d : storico.getDipendenti()) {
                if (d.getId().equals(selectedId)) {
                    dipendente = d;
                    break;
                }
            }
            if (dipendente != null) {
                try {
                    tm.aggiungiMembroTeam(dipendente);
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Errore", JOptionPane.WARNING_MESSAGE);
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Dipendenti aggiunti al team con successo!");
        aggiornaTabellaDipendenti(storico.getDipendenti());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("sun.java2d.uiScale", "2");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aggiungiDipendente;
    private javax.swing.JButton aggiungiProgetti;
    private javax.swing.JSpinner anniDip;
    private javax.swing.JTextField budgetProgetto;
    private javax.swing.JTextField cercaDipendenti;
    private javax.swing.JTextField cercaProgetti;
    private javax.swing.JTextField cercaStorico;
    private javax.swing.JTextField certificazioneDip;
    private javax.swing.JSpinner dataFineProgetto;
    private javax.swing.JSpinner dataInizioProgetto;
    private javax.swing.JTextField descrizioneProgetto;
    private javax.swing.JButton eliminaDipendente;
    private javax.swing.JButton eliminaProgetti;
    private javax.swing.JTextField fileProgetto;
    private javax.swing.JComboBox<String> filtroDipendente;
    private javax.swing.JComboBox<String> filtroProgetto;
    private javax.swing.JComboBox<String> filtroStorico;
    private javax.swing.JTextField idDipendente;
    private javax.swing.JTextField idProgetto;
    private javax.swing.JButton indietroDipendente;
    private javax.swing.JButton indietroProgetti;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField linguaggioDip;
    private javax.swing.JList<String> listaDip;
    private javax.swing.JButton modificaDipendente;
    private javax.swing.JButton modificaProgetti;
    private javax.swing.JTextField nomeDipendente;
    private javax.swing.JTextField nomeProgetto;
    private javax.swing.JTextField nomeTeamDip;
    private javax.swing.JPanel panDipendenti;
    private javax.swing.JPanel panProgetti;
    private javax.swing.JPanel panStorico;
    private javax.swing.JPanel panelGarante;
    private javax.swing.JPanel panelProgrammatore;
    private javax.swing.JPanel panelTeamManager;
    private javax.swing.JComboBox<String> progettoDip;
    private javax.swing.JComboBox<String> ruoloDipendente;
    private javax.swing.JComboBox<String> statoProgetto;
    private javax.swing.JTable tabDipendenti;
    private javax.swing.JTable tabProgetti;
    private javax.swing.JTable tabStorico;
    private javax.swing.JLabel titoloDipendenti;
    private javax.swing.JLabel titoloProgetti;
    private javax.swing.JLabel titoloStorico;
    private javax.swing.JButton visitaDipendenti;
    private javax.swing.JButton visitaProgetti;
    // End of variables declaration//GEN-END:variables
}
